

－要件定義書　学習支援型タイピングアプリ－




学習支援型タイピングアプリ
Remind code typing(仮)
要件定義書ver1.2





2024年9月18日
PJ Staff A


改訂履歴

バージョン
日付
改訂者
改訂内容
1.0
2024/09/17
PJ Staff A
新規作成
1.1
2024/09/18
PJ Staff A
冗長項目を削除、
工程改訂、機能要件追加、etc
1.2
2024/09/18
PJ Staff A
機能要件一部削除











目次（「Ctrl＋クリック」で各ページにジャンプできます）
1. 概要	5
(1) 当アプリ開発の目的	5
(2) 現状の課題	5
(3) プロジェクトの背景	5
(4) システム構成図	6
(5) 用語定義	6
2. 業務要件　※デモとして仮定	7
(1) 業務要件一覧	7
(2) 業務フロー図	9
(3) 規模	10
(4) 場所	10
(5) 時期・時間	10
(6) 指標	11
(7) システム化範囲	11
3. 機能要件	13
(1) 機能一覧	13
(2) 画面	14
(3) 帳票	15
(4) 情報・データ	15
4. 非機能要件	16
(1) ユーザビリティおよびアクセシビリティ	16
(2) システム方式	17
(3) 規模	18
(4) 性能	18
(5) 信頼性	19
(6) 拡張性	19
(7) 互換性	20
(8) 継続性	21
(9) セキュリティ	21
(10) 稼働環境　※目安として仮定	21
(11) テスト	22
(12) マニュアル	23
(13) 運用	23
(14) 保守	25
5. 補足	27
(1) プロジェクト　スケジュール	27
(2) プロジェクト　体制	27



1. 概要

(1) 当アプリ開発の目的
・プログラミング初学者である駆け出しエンジニア2名のポートフォリオ作成。
・ゼロイチでのアプリ開発を経験し、実務フローのイメージを明確化する。
・学習支援型アプリを開発し、利用、アップデートを繰り返していくことでベンダー（開発者）側、ユーザー（利用者）側双方の視点を体験し、ニーズに沿った開発力を付ける。

(2) 現状の課題
カテゴリー
詳細
技術者の開発経験
不足の課題
・主技術者2名の経験が乏しく、具体的な開発イメージがない。
・必要技術要件について明確に把握できていない。
・工数の見積もり、実現可能性、リスクについて不明瞭。
・技術者のスキル不足で質を担保出来ない。企画倒れのリスク。
・リリース後、継続利用していくことを前提とした時の保守・運用方針。
時間的制約の課題
・スタンバイによる自己研鑽期間 等を利用し開発する為、投入可能リソースが流動的。
・実務が優先となる為、オンスケでの開発は困難。
開発環境の課題
・主技術者2名の開発環境の相違。（Windows、Mac）
・プライベートPCを利用する為、環境構築時、PCスペックが不足する可能性がある。
・開発中のデータ共有時、互換性を保つ必要性。

(3) プロジェクトの背景
カテゴリー
詳細
未経験・微経験技術者市場価値の強化
・開発系エンジニアを志望するSES社員2名がスタンバイ（自宅待機）となっている。待期期間中、開発市場で活躍出来る人材であることの説得力を得ることが急務。
・昨今の開発市場では、経験重視の企業が多く、実務としての開発経験が最も高く評価されやすい。
その為、実務を模したポートフォリオ作成（開発経験）を行うことが最も合理的な市場価値の強化に繋がる。
ベンダー、ユーザー双方の視点を疑似体験
・開発者と使用者双方の視点を疑似体験することで、ニーズや傾向を分析し、サービスの改善に活用する。
技術学習の効率強化
・当プロジェクトを完遂することで、開発経験、技術証明用のポートフォリオ作成、必要技術要件の分析、技術学習課題の洗い出し、アプリ開発フロー把握、工数見積もりサンプルの取得、リリース後の保守、運用、改訂経験、アプリ利用によるタイピング技術向上 及び 暗記系学習の効率強化、テスト・デバッグ経験など体系的学習が可能。

(4) システム構成図
学習支援型タイピングアプリの全体構成図は次の通り。

(5) 用語定義
カテゴリー
詳細
Rct(仮)
Rct(Remind code typing)学習支援型タイピングアプリの仮称。
ベンダー
開発者。ここでは上流~下流問わず開発に携わる全ての工程関係者を指す。
ユーザー
使用者。ここではフロントエンドで操作する利用者を指す。
PJ
プロジェクトの略称。ここでは開発プロジェクトを含む。
電子学習帳
学習支援型タイピングアプリ内でユーザー側が①言語 ②問題 ③解説の登録、参照を可能にする機能の通称。



2. 業務要件　※デモとして仮定

(1) 業務要件一覧
本学習支援型タイピングアプリは、以下の学習支援を実現するものとする。

■ユーザー対応業務　（フロントエンド仕様　概要）
業務
詳細
実施者
システム化対象
タイピング能力の向上支援（タイピング評価）
ユーザーのキーボード入力に対し、正答率・入力時間を評価し、タイピング訓練の支援を行う。
Rct(仮)
○
暗記学習効率化の支援（電子学習帳）
ユーザー側での簡易な操作により①言語 ②問題 ③解説の登録、参照を可能にすることで、暗記学習の効率化支援を行う。
Rct(仮)
○
タイピング訓練、暗記学習効率化システムの連携
電子学習帳で登録した内容をタイピング訓練システムと連携させ、タイピング訓練をしながら暗記学習を進めることが出来るプログラムを生成する。
Rct(仮)
○
タイピング正答率・入力時間の記録、評価の可視化
タイピング訓練の評価を記録し、表示するプログラムを生成する。
Rct(仮)
○
UIの操作説明
初回利用時、直感的に利用できるよう操作説明を行う。以降任意で参照可能。
Rct(仮)
○

■内部業務　（開発、バックエンド仕様　概要）
業務
詳細
実施者
システム化対象
タイピング評価指標の分析
公的に利用されている評価指標・ユーザーニーズの傾向を分析する。
データアナリスト

タイピング評価機能の作成
分析したタイピング評価指標を下に、タイピング評価機能を作成する。
プログラマー

タイピング評価情報の記録用データベース作成、連携
タイピング評価機能で評価したユーザーデータを記録、保存するデータベースを作成、連携する。
プログラマー

タイピング正答率・入力時間の評価、記録
ユーザーのタイピング訓練結果を、タイピング評価機能を利用し評価し、ユーザーデータベースへ記録する。
Rct(仮)
○
電子学習帳機能の作成、実装
1.言語2.問題3.解説を紐づけて登録することの出来る機能を作成する。
プログラマー

電子学習帳機能の記録用データベース作成、連携
ユーザーが登録した電子学習帳を記録、保存するデータベースを作成、連携する。
プログラマー

電子学習帳情報の記録
ユーザーが登録した電子学習帳を、ユーザーデータベースへ記録する。
Rct(仮)
○



■システム管理業務　（アプリの保守、運用　概要）
業務
詳細
実施者
システム化対象
FAQ対応
本アプリへの問合せ、質問について回答、サポートを行う。
アプリ管理者

Readmeの作成、更新
初回ダウンロード時、問題無くアプリ動作が出来るよう.txt形式で手引書を作成、更新する。
アプリ管理者

アプリアップデート
本アプリおよびバージョン管理システムの更新を行い、最新の状態を維持する。
アプリ管理者

トラブルシューティング
本アプリに関するエラー、バグの解析・修正を行う。
アプリ管理者


(2) 業務フロー図







(3) 規模
■データ件数・サービス利用者数
月次の問い合わせ数
平均で1件／月
ログデータ
月次で20件の対話ログを記録
利用者数
月間で5人のユーザーが利用

■商品・サービスの取り扱い
商品カテゴリー数
1種類
サービスカテゴリー数
1種類

■オペレーターのエスカレーション処理
オペレーター数
アプリの保守・運用を受け持つオペレーター：平均1人／月 ※アプリ管理者
エスカレーション回数
※単独管理とし、エスカレーションを前提としない。

■システムの規模
同時接続数
ピーク時：1人
データベース容量
※ローカル環境での仮想データベース利用を前提とする。目安：1.5GB

(4) 場所
自宅内・自宅外（※場所を選ばず利用できること）

(5) 時期・時間
システム稼働時間
※アプリ起動時のみ、24時間365日
メンテナンス
トラブルシューティング時のみとする。
アクセスのピーク
※ユーザーに依存。
顧客サポート時間
FAQ対応時、不定期でオペレーターによるユーザーへのサポート対応が行われる。




(6) 指標
■利用状況指標
日次の問い合わせ数
平均で1件／月以上の問い合わせを処理できるようにする。
ログデータ
月次で20件以上の対話ログを記録および解析可能な設計をする。

■品質管理指標
ユーザー満足度
GitHub上でOSSとして公開し、満足度☆4以上を目指す。

(7) システム化範囲
■システム化の対象範囲
業務
内容
ユーザー対応業務
（フロントエンド仕様 概要）
○タイピング能力の向上支援（タイピング
評価）
○暗記学習効率化の支援（電子学習帳）
○タイピング訓練、暗記学習効率化システ
ムの連携
○タイピング正答率・入力時間の記録、評
価の可視化
○UI の操作説明
内部業務
（開発、バックエンド仕様 概要）
○タイピング正答率・入力時間の評価、記
録
○電子学習帳情報の記録

■システム化の対象外範囲
業務
内容
内部業務
（開発、バックエンド仕様 概要）
○タイピング評価指標の分析
○タイピング評価機能の作成
○タイピング評価情報の記録用データベー
ス作成、連携
○電子学習帳機能の作成、実装
○電子学習帳機能の記録用データベース作
成、連携
システム管理業務
（アプリの保守、運用 概要）
○FAQ対応
○Readmeの作成、更新
○アプリアップデート
○トラブルシューティング



3. 機能要件

(1) 機能一覧

■基本機能
機能
説明
対応業務要件
タイピング評価機能
登録した電子学習帳からランダムで問題を出題し、タイピング訓練を行い、正答率・入力時間を評価する機能
○タイピング能力の向上支援（タイピング評価）
○タイピング訓練、暗記学習効率化システムの連携
〇タイピング正答率・入力時間の記録、評価の可視化
〇タイピング正答率・入力時間の評価、記録
〇UIの操作説明 
電子学習帳機能
ユーザー側での簡易な操作により①言語 ②問題 ③解説の登録、参照を可能にする機能
○暗記学習効率化の支援（電子学習帳） 
○タイピング訓練、暗記学習効率化システムの連携
〇電子学習帳情報の記録 
〇UIの操作説明
成績記録保持、参照機能
タイピング訓練結果、電子学習帳に登録した情報を保持、参照する機能
○タイピング能力の向上支援（タイピング評価）
○暗記学習効率化の支援（電子学習帳）
○タイピング訓練、暗記学習効率化システムの連携 
〇タイピング正答率・入力時間の記録、評価の可視化
〇タイピング正答率・入力時間の評価、記録 
〇電子学習帳情報の記録
〇UIの操作説明




■拡張機能
機能
説明
対応業務要件
タイピング成績の分析
タイピング成績の集計を行い、スコア、評価指標、得意・不得意な言語、問題を表示する機能
○タイピング能力の向上支援（タイピング評価） 
〇暗記学習効率化の支援（電子学習帳）
〇タイピング正答率・入力時間の記録、評価の可視化 
苦手な問題の学習強化
タイピング練習時、正答率の低い問題を優先して出題し、苦手な問題を学習強化する機能
○暗記学習効率化の支援（電子学習帳）

(2) 画面
■ユーザー向け画面
画面名
説明
タイトル画面
アプリ起動時、最初に表示される画面。
タイピング訓練、電子学習帳、成績閲覧、UI操作説明から項目を選択する。
タイピング訓練画面
タイピング訓練を行う画面。
挑戦したい電子学習帳を選択し、挑戦。
初回起動時のみ、操作説明を行う。
電子学習帳画面
電子学習帳に1.言語 2.問題 3.解説の登録を行う画面。参照も可能。
初回起動時のみ、操作説明を行う。
成績閲覧画面
登録済の電子学習帳、タイピング訓練成績を表示する画面。スコア、評価指標、得意・不得意な言語、問題を閲覧できる。
初回起動時のみ、操作説明を行う。







(3) 帳票

■レポート帳票
帳票名
内容
FAQ対応レポート
FAQの対応ログをまとめたレポート。
※必要に応じ作成するものとし、原則不要とする。作成時は、問い合わせ日時、対応日時、問い合わせ内容、解決率、対応時間などのデータを含む。

■ユーザー向け帳票
帳票名
内容
FAQ対応ログ
FAQ対応レポートを簡略化しまとめたtxt形式データ。対応レポート作成時に更新するものとし、DLパッケージ（フォルダ）に保存する。

■管理者向け帳票
帳票名
内容FAQ
FAQ更新履歴
FAQの更新履歴を記録する帳票。
誰がいつどのFAQを更新したかを記録。
データはアプリ管理者保管とする。

(4) 情報・データ

情報・データ名
内容
ダウンロード情報
OSS上でダウンロードされた回数およびダウンロード方法を含むデータ。
FAQデータ
よくある質問とその回答をまとめたデータ。
各質問に対する回答内容とカテゴリー分類が含まれる。
ログデータ
FAQ対応ログや更新ログ、アプリのDL状況やエラーの記録が含まれるデータ。

4. 非機能要件

(1) ユーザビリティおよびアクセシビリティ
■ユーザビリティ要件
項目
説明
具体的な要件
直感的なユーザーインターフェース
Rct(仮)は、直感的で分かりやすく、ユーザーが迷わず操作できる設計とする。
・シンプルで明確なナビゲーション
・一貫したデザイン
操作の簡単さ
最小限のクリックや入力で目的を達成できるように設計する。
・明確な操作説明
・選択肢の提示による入力の簡略化
エラーメッセージの分かりやすさ
エラーが発生した際には、具体的で理解しやすいメッセージを表示し、解決策を提示する。
・明確なエラーメッセージ
・解決策の提示

■アクセシビリティ要件
項目
説明
具体的な要件
WCAG 2.1 を基準とした設計
Web Content Accessibility Guidelines (WCAG) 2.1の基準を軸とし、多くのユーザーがアクセス可能な設計とする。
・コントラスト比の適正化
・代替テキストの提供
・キーボード操作への対応
簡単な言語の使用
専門用語や難解な表現を避け、誰でも理解できる簡単な言葉を使用する。
・一般的な表現の使用
・必要に応じて用語の説明を提供










(2) システム方式
■システムアーキテクチャ
項目
説明
具体的な要件
仮想データベースアーキテクチャ
システムは仮想データベース環境上で動作するように設計され、スケーラビリティと可用性を確保する。
・SQL serverを使用
マイクロサービスアーキテクチャ
各機能は独立したマイクロサービスとして実装され、個別にデプロイやスケーリングが可能。
・コンテナ化技術（Docker）の採用
・APIゲートウェイの導入

■データベース
項目
説明
具体的な要件
RDB（リレーショナルデータベース）
問い合わせデータの保存にRDB（リレーショナルデータベース）を使用する。
・SQL Serverを使用
・高可用性構成（レプリケーション、フェイルオーバー）
NoSQLデータベース
※要検討
セッションデータやキャッシュデータの保存にNoSQLデータベースを使用する。※但し、RDB利用時の処理速度が著しくUXを損ねると判断された場合に限る。
・MongoDB、Cassandra、またはDynamoDBの利用
・高スループット対応

■ネットワーク
項目
説明
具体的な要件
ホームネットワーク
ホームネットワークでの利用を前提。可用性、機密性はユーザーの環境に依存。
・ホームネットワーク環境下での動作






■バックアップとリカバリ
項目
説明
具体的な要件
不定期バックアップ
アプリの不定期なバックアップを行い、データの損失時にはリカバリできるようにする。
・アプリ更新時のローカル環境へのバックアップ保存
・GitHubを利用したver管理

■モニタリングとロギング
項目
説明
具体的な要件
ロギング
FAQログ、エラーログを記録し、解析可能な形で保存する。
・ログの長期保存と不定期のレビュー

(3) 規模
■ユーザー数
項目
説明
具体的な要件
最大同時接続ユーザー数
アプリが同時に処理できるユーザー数の上限を定義する。
1ユーザーの接続を前提。

■データ件数
項目
説明
具体的な要件
総データ量
アプリ全体で管理するデータの総量を定義する。
1.5GBのデータストレージ容量

(4) 性能
■レスポンスタイム（応答時間）
項目
説明
具体的な要件
ユーザーインターフェースのレスポンスタイム
ユーザーからのリクエストに対する応答時間を定義する。
・一般的な操作（ログイン、問い合わせ）：3秒以内
・高負荷時の操作（大量データの検索）：5秒以内


■スケーラビリティ
項目
説明
具体的な要件
水平スケーラビリティ
システムが将来的な拡張にどれだけ対応できるかを定義する。
・データ量が3倍に増加しても、アプリのパフォーマンスが低下しない

(5) 信頼性
■可用性
項目
説明
具体的な要件
アプリ稼働率
アプリが稼働している時間の割合を定義する。
・ユーザーに依存。起動時は稼働率：99.9%以上

■バックアップとリカバリ
項目
説明
具体的な要件
バックアップポリシー
アプリのバックアップに関する方針と頻度を定義する。
・アプリ更新時のローカル環境へのバックアップ実施
・GitHubを利用したver管理の実施
データリカバリ
データ損失時の復旧手順と対応時間を定義する。
・バックアップデータからの復旧時間：48時間以内

(6) 拡張性
項目
説明
具体的な要件
マイクロサービスアーキテクチャの採用
システム機能をマイクロサービスとして独立させ、個別にスケールさせる能力を定義する。
・各機能を独立したマイクロサービスとして実装
・コンテナ化技術（Docker）の活用








(7) 互換性
項目
説明
具体的な要件
オペレーティングシステム（OS）
システムが複数のオペレーティングシステムで動作することを定義する。
・Windows, macOSのサポート
・オペレーティングシステムのバージョン互換性リストの作成
ブラウザ
システムが主要なWebブラウザで動作することを定義する。
・Google Chrome,の最新バージョンのサポート
・ブラウザ互換性テストの実施
デバイス
システムがPC上で動作することを定義する。
・デスクトップ、ノートPC、での動作保証
・アプリ仕様の明示と最小動作環境の定義
ネットワークプロトコル
システムが標準的なネットワークプロトコルをサポートすることを定義する。
・HTTP/HTTPSのサポート
データベース
アプリが異なるデータベースシステムと互換性を保つことを定義する。
・MySQL,SQL Serverのサポート
ロケール設定
アプリが日本語設定に対応する。
・日本語のサポート
・日付、数値フォーマットの書式設定












(8) 継続性
■バックアップとリカバリ
項目
説明
具体的な要件
不定期バックアップ
アプリの不定期なバックアップを行い、データの損失を防ぐ。
・アプリ更新時のローカル環境へのバックアップ保存
・GitHubを利用したver管理
データリカバリ
エラーやデータ損失時に迅速にアプリを復旧する手順を定義。
・バックアップデータからの復旧時間：48時間以内
・リカバリ手順書の作成と更新

(9) セキュリティ
■脆弱性管理
項目
説明
具体的な要件
脆弱性評価
アプリに影響を与える可能性のある脆弱性を特定し、対策を実施する。
・更新時の脆弱性評価
・脆弱性の緊急度や重要度に応じた修正スケジュールの策定

(10) 稼働環境　※目安として仮定

項目
説明
具体的な要件
サーバースペック
アプリが稼働するために必要な最低限のハードウェア要件。
・CPU：2.5 GHz以上のクアッドコアプロセッサ
・メモリ：16 GB以上
・ストレージ：SSD 500 GB以上
ネットワーク要件
アプリの正常な運用に必要なネットワーク環境の要件。
・最低限の帯域幅：1 Gbps
・冗長化されたインターネット接続
オペレーティングシステム（OS）
アプリがサポートするオペレーティングシステムの要件。

・Windows Server 2016以上
データベース
アプリで利用するデータベース管理システム（DBMS）の要件。
・MySQL 8.0以上
・SQL Server 2019以上
・PostgreSQL 12.0以上
外部ライブラリとフレームワーク
アプリが依存する外部ライブラリやフレームワークのバージョン管理要件。
・React.js 17.0以上

(11) テスト

項目
説明
具体的な要件
単体テスト
個々のモジュールやコンポーネントの機能を検証するテスト。
・機能ごとにユニットテストを実施
・テストカバレッジ：80%以上
結合テスト
複数のコンポーネントが正しく連携して動作することを確認するテスト。
・コンポーネント間のインターフェースとデータフローの検証
システムテスト
システム全体の機能と性能を確認するテスト。
・全機能の統合テスト
・本番環境に近い構成のテスト環境
ユーザー受け入れテスト
システムがユーザーの要求を満たしているかを確認するテスト。
・すべてのテストケースの合格率：95%以上
・重大な不具合の未解決ゼロ
パフォーマンステスト
システムの性能と応答時間を検証するテスト。
・レスポンスタイムとスループットの測定
・平均レスポンスタイム：3秒以内
テストデータ
テストのために使用するデータの要件。
・個人情報など、機密性の高い情報をテストデータとして使用するのは禁止
テスト結果の報告
テスト実施後の結果報告に関する要件。
・テストレポートの作成と提出
・テスト結果の分析と改善点の提案

(12) マニュアル
■ドキュメント作成
項目
説明
具体的な要件
操作マニュアル
システムの操作方法について記述したマニュアル
・ユーザー向け操作手順書
・管理者向け操作手順書
保守マニュアル
システムの保守方法について記述したマニュアル
・定期保守作業の手順書
・トラブルシューティングガイド

(13) 運用
■運用体制
項目
説明
具体的な要件
アプリ運用者
アプリ運用担当者に関する要件。
・アプリ管理者に一任

■運用手順
項目
説明
具体的な要件
日常運用
日常的なアプリ運用の手順に関する要件。
・FAQ発生時のレポート作成
インシデント管理
エラーやインシデント発生時の対応手順に関する要件。
・インシデント対応フローの確立
・インシデントレポートの作成とレビュー
変更管理
アプリの変更を管理する手順に関する要件。
・変更申請および承認プロセスの確立
・変更履歴の記録と監視
ドキュメント管理
運用に関するドキュメント管理の要件。
・運用手順書やマニュアルの一元管理
・ドキュメントのバージョン管理





■バックアップとリカバリ
項目
説明
具体的な要件
データバックアップ
アプリデータのバックアップに関する要件。
・バックアップデータの保管方法と場所の定義
データリカバリ
エラーやデータ損失時の復旧手順に関する要件。
・リカバリ手順の策定
・リカバリ手順の定期的なテストとレビュー

■メンテナンス
項目
説明
具体的な要件
ソフトウェアアップデート
システムソフトウェアのアップデートに関する要件。
・アップデート前後の動作確認テスト

■運用レポート
項目
説明
具体的な要件
運用状況報告
アプリ運用状況の報告に関する要件。
・FAQ対応時運用レポートの作成と共有、保存
インシデント報告
インシデント発生時の詳細な報告に関する要件。
・インシデント報告書の作成
・インシデント原因分析と対策の実施

■コミュニケーション
項目
説明
具体的な要件
運用会議
アプリ運用に関する会議の要件。
・関係者間で合意を得た場合の開催
・議事録の作成と配布
報告体制
運用状況やインシデントに関する報告体制の要件。
・重要インシデントの即時報告体制の確立
・運用報告の共有






(14) 保守

■保守体制
項目
説明
具体的な要件
保守組織
アプリ保守担当者やチームに関する要件。
・保守チームの編成と役割分担
保守連絡体制
保守に関する連絡体制と窓口の要件。
・緊急連絡先リストの作成
・保守連絡窓口の設置

■保守手順
項目
説明
具体的な要件
定期保守
アプリの定期保守作業の手順に関する要件。
・定期保守スケジュールの策定
・定期保守作業チェックリストの作成

■障害対応
項目
説明
具体的な要件
インシデント対応
アプリDL、動作エラー発生時の対応手順に関する要件。
・インシデント管理フローの確立
・インシデント対応のタイムラインと優先順位設定
インシデントレポート
障害発生後のインシデントレポート作成に関する要件。
・インシデント詳細報告書の作成
・再発防止策の提案と実施

■ソフトウェア保守
項目
説明
具体的な要件
バグフィックス
ソフトウェアのバグ修正に関する要件。
・バグ管理システムの利用
・バグ修正リリースのスケジュール管理
機能改善
ソフトウェアの機能改善やアップデートに関する要件。
・機能改善リクエストの受付と優先順位付け
・機能追加および改善のリリース計画

■保守記録
項目
説明
具体的な要件
保守作業記録
保守作業の記録と管理に関する要件。
・保守作業ログの作成と保管
・保守履歴データベースの維持
定期報告
保守活動の定期報告に関する要件。
・年次ごとの報告書の作成
・報告書の共有とレビュー

■保守ツール
項目
説明
具体的な要件
保守ツール
アプリ保守に使用するツールに関する要件。
・保守管理ツールの選定と導入
・ツールの使用方法に関するトレーニング



5. 補足

(1) プロジェクト　スケジュール



(2) プロジェクト　体制
※本PJは適応型ソフトウェア開発を軸として全工程をメンバーが兼務するものとする。



以上
