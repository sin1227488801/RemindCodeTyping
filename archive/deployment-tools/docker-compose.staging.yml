version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: rct-database-staging
    environment:
      POSTGRES_DB: ${DB_NAME:-rct_staging}
      POSTGRES_USER: ${DB_USER:-rct_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - rct-staging-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-rct_user} -d ${DB_NAME:-rct_staging}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend Application
  backend:
    image: rct-backend:${VERSION:-latest}
    container_name: rct-backend-staging
    environment:
      SPRING_PROFILES_ACTIVE: staging
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/${DB_NAME:-rct_staging}
      SPRING_DATASOURCE_USERNAME: ${DB_USER:-rct_user}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      LOGGING_LEVEL_ROOT: DEBUG
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus,env
    ports:
      - "8081:8080"
    networks:
      - rct-staging-network
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    volumes:
      - backend_staging_logs:/app/logs

  # Frontend Application
  frontend:
    image: rct-frontend:${VERSION:-latest}
    container_name: rct-frontend-staging
    ports:
      - "3001:8080"
    networks:
      - rct-staging-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: rct-redis-staging
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_staging_data:/data
    ports:
      - "6380:6379"
    networks:
      - rct-staging-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_staging_data:
  redis_staging_data:
  backend_staging_logs:

networks:
  rct-staging-network:
    driver: bridge