version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: rct-database
    environment:
      POSTGRES_DB: ${DB_NAME:-rct_db}
      POSTGRES_USER: ${DB_USER:-rct_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-rct_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./rct-backend/src/main/resources/db/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - rct-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-rct_user} -d ${DB_NAME:-rct_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Backend Application
  backend:
    build:
      context: ./rct-backend
      dockerfile: Dockerfile
      target: production
    container_name: rct-backend
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-production}
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/${DB_NAME:-rct_db}
      SPRING_DATASOURCE_USERNAME: ${DB_USER:-rct_user}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-rct_password}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400000}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:8080}
      LOGGING_LEVEL_ROOT: ${LOG_LEVEL:-INFO}
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      JAVA_OPTS: "-Xms512m -Xmx1024m -XX:+UseG1GC -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0"
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    networks:
      - rct-network
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - backend_logs:/app/logs

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: production
    container_name: rct-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:8080"
    networks:
      - rct-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: rct-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - rct-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    profiles:
      - with-redis

  # Nginx Load Balancer (for production scaling)
  nginx:
    image: nginx:alpine
    container_name: rct-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    networks:
      - rct-network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    profiles:
      - with-nginx

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local

networks:
  rct-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16